/*
include "../includes/License.as.inc";
 */

package temple.core.debug.log 
{
	import flash.events.Event;
	import temple.core.events.CoreEvent;
	import temple.core.templelibrary;

	/**
	 * Event dispatched by the <code>Log</code> class when someting is logged. You can listen for this Event if you want
	 * to create your own Logger.
	 * 
	 * @see temple.core.debug.log.Log
	 * 
	 * @author Thijs Broerse
	 */
	public class LogEvent extends CoreEvent 
	{
		include "../../includes/Version.as.inc";
		
		/**
		 * Event type
		 */
		public static const EVENT:String = "LogEvent.Event";
		
		private var _level:String;
		private var _data:*;
		private var _sender:String;
		private var _senderId:uint;
		private var _stackTrace:String;
		private var _time:uint;
		private var _frame:uint;

		/**
		 * Creates a new LogEvent.
		 * @param level the level of the LogEvent.
		 * @param data data send with the Log message
		 * @param sender the 'toString' of the object that send the log message
		 * @param senderId the object id of the sender. The id is generated by the Registry.
		 */
		public function LogEvent(level:String, data:*, sender:String, senderId:uint, stackTrace:String = null, time:uint = 0, frame:uint = 0) 
		{
			super(LogEvent.EVENT);
			
			_level = level;
			_data = data;
			_sender = sender;
			_senderId = senderId;
			_stackTrace = stackTrace;
			_time = time;
			_frame = frame;
			
			toStringProps.length = 0;
			toStringProps.push('level', 'data', 'sender', 'objectId');
		}

		/**
		 * Returns the level of the Event.
		 * @see temple.core.debug.log.LogLevel
		 */
		public function get level():String
		{
			return _level;
		}
		
		/**
		 * The data send with the Log message
		 */
		public function get data():*
		{
			return _data;
		}
		
		/**
		 * The 'toString' of the object that send the log message
		 */
		public function get sender():String
		{
			return _sender;
		}
		
		/**
		 * The id of the object that send the log message. The id is generated by the Registry.
		 * With the id you can get the object at the Registry
		 * @see temple.core.debug.Registry#getObject()
		 */
		public function get objectId():uint
		{
			return _senderId;
		}
		
		/**
		 * The stack trace of the Log. To find the place where the message was logged.
		 * Only available if in debug players and if the this option is enabled in the Log.
		 */
		public function get stackTrace():String
		{
			return _stackTrace;
		}
		
		/**
		 * The total amount of milliseconds has passed since the application started.
		 */
		public function get time():uint
		{
			return _time;
		}
		
		/**
		 * The total amount of frames has passed since the application started.
		 */
		public function get frame():uint
		{
			return _frame;
		}
		
		/**
		 * Creates a copy of an existing LogEvent.
		 */
		override public function clone():Event 
		{
			return new LogEvent(_level, _data, _sender, _senderId, _stackTrace, _frame);
		}
	}
}